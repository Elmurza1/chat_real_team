from channels.db import database_sync_to_async
import json
from channels.generic.websocket import AsyncWebsocketConsumer
from django.contrib.auth import get_user_model
from .models import Message
from channels.layers import get_channel_layer
import redis

User = get_user_model()
redis_client = redis.Redis(host='localhost', port=6379, db=0)  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
channel_layer = get_channel_layer()


class ChatConsumer(AsyncWebsocketConsumer):
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""

    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket"""
        print("WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω")
        self.user = self.scope['user']
        self.receiver_id = self.scope['url_route']['kwargs']['user_id']
        self.room_group_name = f"chat_{min(self.user.id, int(self.receiver_id))}_{max(self.user.id, int(self.receiver_id))}"

        if not self.user.is_authenticated:
            await self.close()
            return

        await self.channel_layer.group_add(
            self.room_group_name,
            self.channel_name
        )

        await self.accept()

        # üî• –û–±–Ω—É–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Redis
        unread_key = f"unread_{self.user.id}"
        redis_client.set(unread_key, 0)

        # üî• –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å—á—ë—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await self.channel_layer.group_send(
            f"user_{self.user.id}",
            {
                "type": "new_message_notification",
                "sender": "",
                "message": "",
                "unread_count": 0,
            }
        )

    async def disconnect(self, close_code):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–æ–∫–µ—Ç–∞"""
        print(f"WebSocket –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–∏—á–∏–Ω–∞: {close_code}")

        await self.channel_layer.group_discard(
            self.room_group_name,
            self.channel_name
        )

    async def receive(self, text_data):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        data = json.loads(text_data)
        message_content = data['message']
        sender = self.user
        receiver = await self.get_receiver(self.receiver_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
        message = await self.create_message(sender, receiver, message_content)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
        await self.channel_layer.group_send(
            self.room_group_name,
            {
                'type': 'chat_message',
                'message': message.content,
                'sender': sender.username
            }
        )

        # ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        await self.send_notification(receiver, sender.username, message_content)

    async def chat_message(self, event):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await self.send(text_data=json.dumps({
            "message": event["message"],
            "sender": event["sender"],
        }))

    async def send_notification(self, receiver, sender_name, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ WebSocket-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è + –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        unread_key = f"unread_{receiver.id}"
        redis_client.incr(unread_key)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö

        await channel_layer.group_send(
            f"user_{receiver.id}",
            {
                "type": "new_message_notification",
                "sender": sender_name,
                "message": message,
                "unread_count": int(redis_client.get(unread_key)),
            }
        )

    @database_sync_to_async
    def get_receiver(self, user_id):
        return User.objects.get(id=user_id)

    @database_sync_to_async
    def create_message(self, sender, receiver, content):
        return Message.objects.create(sender=sender, receiver=receiver, content=content)
